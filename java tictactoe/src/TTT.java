import java.util.Scanner;

/**
 * Tic-Tac-Toe game for 2 players.
 * Players take turns to place their signs ('X' or 'O') on a 3x3 board.
 * The game detects wins, draws, and validates moves.
 *
 * Note: all comments and dokumentations are automatically generated by AI
 */
public class TTT {

    static int expectedTurns = 9;          // Maximum turns before draw
    static int count = 1;                  // Current turn
    static char[][] board = new char[3][3]; // Game board

    static int arrayI = 0;                 // Current row for move
    static int arrayJ = 0;                 // Current column for move
    static boolean validInput = true;      // Track if last input was valid

    static String[][] playerInput = {{"x1", "x2", "x3"},
            {"y1", "y2", "y3"},
            {"z1", "z2", "z3"}};

    /**
     * Player class to store player sign ('X' or 'O')
     */
    class PlayerInfo {
        private char playerSign;

        public PlayerInfo(char playerSign) {
            this.playerSign = playerSign;
        }

        public char getPlayerSign() {
            return playerSign;
        }
    }

    /**
     * Initialize the board if empty
     */
    public static void initializeBoard(char[][] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                if (array[i][j] == '\u0000') {
                    array[i][j] = ' ';
                }
            }
        }
    }

    /**
     * Reset the board for a new game
     */
    public static void resetBoard(char[][] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                array[i][j] = ' ';
            }
        }
    }

    /**
     * Print the board and current player turn
     */
    public static void printBoard(char[][] array, PlayerInfo currentPlayer) {
        System.out.println("\nPlayer " + currentPlayer.getPlayerSign() + " turn. Turn: " + count);

        initializeBoard(array);

        System.out.println("\n ---------------");
        System.out.println("|   | 1 | 2 | 3 |");
        System.out.println(" ---------------");
        System.out.println("| x | " + array[0][0] + " | " + array[0][1] + " | " + array[0][2] + " |");
        System.out.println(" ---------------");
        System.out.println("| y | " + array[1][0] + " | " + array[1][1] + " | " + array[1][2] + " |");
        System.out.println(" ---------------");
        System.out.println("| z | " + array[2][0] + " | " + array[2][1] + " | " + array[2][2] + " |");
        System.out.println(" ---------------");
        System.out.println("\nSelect a field: ");
    }

    /**
     * Check if a player has won
     */
    public static boolean checkWin(char[][] array, char playerSign) {
        for (int i = 0; i < array.length; i++) {
            if (checkRow(i, array, playerSign) || checkColumn(i, array, playerSign) ||
                    checkDiagonal(array, playerSign) || checkOtherDiagonal(array, playerSign)) {
                return true;
            }
        }
        return false;
    }

    private static boolean checkRow(int row, char[][] array, char playerSign) {
        for (int j = 0; j < array.length; j++) {
            if (array[row][j] != playerSign) return false;
        }
        return true;
    }

    private static boolean checkColumn(int col, char[][] array, char playerSign) {
        for (int i = 0; i < array.length; i++) {
            if (array[i][col] != playerSign) return false;
        }
        return true;
    }

    private static boolean checkDiagonal(char[][] array, char playerSign) {
        for (int i = 0; i < array.length; i++) {
            if (array[i][i] != playerSign) return false;
        }
        return true;
    }

    private static boolean checkOtherDiagonal(char[][] array, char playerSign) {
        for (int i = 0; i < array.length; i++) {
            if (array[i][array.length - 1 - i] != playerSign) return false;
        }
        return true;
    }

    /**
     * Check if selected cell is free
     */
    public static boolean checkIfZoneIsOccupied(char[][] array, PlayerInfo currentPlayer) {
        if (array[arrayI][arrayJ] == 'X' || array[arrayI][arrayJ] == 'O') {
            count--;
            return false;
        } else {
            array[arrayI][arrayJ] = currentPlayer.getPlayerSign();
            return true;
        }
    }

    /**
     * Process user input and update board
     */
    public static boolean changeField(char[][] array, PlayerInfo currentPlayer, Scanner objScanner) {
        String userInput = objScanner.nextLine();
        count++;

        if (userInput.equals(TTT.playerInput[0][0])) { arrayI=0; arrayJ=0; validInput=checkIfZoneIsOccupied(array, currentPlayer); return validInput; }
        else if (userInput.equals(TTT.playerInput[0][1])) { arrayI=0; arrayJ=1; validInput=checkIfZoneIsOccupied(array, currentPlayer); return validInput; }
        else if (userInput.equals(TTT.playerInput[0][2])) { arrayI=0; arrayJ=2; validInput=checkIfZoneIsOccupied(array, currentPlayer); return validInput; }
        else if (userInput.equals(TTT.playerInput[1][0])) { arrayI=1; arrayJ=0; validInput=checkIfZoneIsOccupied(array, currentPlayer); return validInput; }
        else if (userInput.equals(TTT.playerInput[1][1])) { arrayI=1; arrayJ=1; validInput=checkIfZoneIsOccupied(array, currentPlayer); return validInput; }
        else if (userInput.equals(TTT.playerInput[1][2])) { arrayI=1; arrayJ=2; validInput=checkIfZoneIsOccupied(array, currentPlayer); return validInput; }
        else if (userInput.equals(TTT.playerInput[2][0])) { arrayI=2; arrayJ=0; validInput=checkIfZoneIsOccupied(array, currentPlayer); return validInput; }
        else if (userInput.equals(TTT.playerInput[2][1])) { arrayI=2; arrayJ=1; validInput=checkIfZoneIsOccupied(array, currentPlayer); return validInput; }
        else if (userInput.equals(TTT.playerInput[2][2])) { arrayI=2; arrayJ=2; validInput=checkIfZoneIsOccupied(array, currentPlayer); return validInput; }
        else { count--; return false; }
    }

    /**
     * Main game loop
     */
    public static void loopField(char[][] array, PlayerInfo player1, PlayerInfo player2, Scanner scanner) {
        PlayerInfo currentPlayer = player1;
        printBoard(array, currentPlayer);

        while (count <= expectedTurns && !checkWin(array, currentPlayer.getPlayerSign())) {
            validInput = changeField(array, currentPlayer, scanner);

            if (!validInput) {
                System.out.println("Invalid input! Please enter a correct field.");
            } else if (!checkWin(array, currentPlayer.getPlayerSign())) {
                currentPlayer = (currentPlayer == player1) ? player2 : player1;
            } else {
                System.out.println("Victory!!! Player " + currentPlayer.getPlayerSign() + " won!");
                printBoard(array, currentPlayer);
                break;
            }

            if (count > expectedTurns) {
                System.out.println("It's a Draw! Nobody wins!");
                printBoard(array, currentPlayer);
                break;
            }

            printBoard(array, currentPlayer);
        }

        count = 1;
        resetBoard(array);
    }

    /**
     * Main method
     */
    public static void main(String[] args) {
        TTT objTTT = new TTT();
        PlayerInfo player1 = objTTT.new PlayerInfo('X');
        PlayerInfo player2 = objTTT.new PlayerInfo('O');

        Scanner objScanner = new Scanner(System.in);
        char[][] array = new char[3][3];

        System.out.println("Do you want to start a new Game? (Yes/No)");
        String startGame = objScanner.nextLine().toLowerCase();

        while (startGame.equals("yes")) {
            loopField(array, player1, player2, objScanner);
            System.out.println("Do you want to start a new Game? (Yes/No)");
            startGame = objScanner.nextLine().toLowerCase();
        }

        objScanner.close();
        System.out.println("Thanks for playing!");
    }
}


